import xml.etree.ElementTree as ET
import sumolib
import os

def fix_calibrators():
    print("=== S·ª¨A CALIBRATOR POSITIONS ===\n")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    net_file = "network/region_1.net.xml"
    cal_file = "additional/calibrator.xml"
    
    if not os.path.exists(net_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {net_file}")
        return
    
    if not os.path.exists(cal_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {cal_file}")
        return
    
    try:
        # ƒê·ªçc network
        print("ƒêang ƒë·ªçc network...")
        net = sumolib.net.readNet(net_file)
        print(f"‚úÖ Network ƒë√£ ƒë∆∞·ª£c ƒë·ªçc th√†nh c√¥ng")
        
        # ƒê·ªçc calibrators
        print("ƒêang ƒë·ªçc calibrators...")
        tree = ET.parse(cal_file)
        root = tree.getroot()
        
        # T√¨m c√°c lo·∫°i calibrator c√≥ th·ªÉ c√≥
        calibrators = []
        calibrators.extend(root.findall("calibrator"))
        calibrators.extend(root.findall("variableSpeedSign"))
        calibrators.extend(root.findall("rerouter"))
        
        print(f"‚úÖ T√¨m th·∫•y {len(calibrators)} calibrator(s)\n")
        
        if len(calibrators) == 0:
            print("‚ùå Kh√¥ng c√≥ calibrator n√†o trong file!")
            # In ra n·ªôi dung file ƒë·ªÉ ki·ªÉm tra
            with open(cal_file, 'r', encoding='utf-8') as f:
                content = f.read()
                print("N·ªôi dung file calibrator.xml (500 k√Ω t·ª± ƒë·∫ßu):")
                print(content[:500] + "...")
            return
        
        problem_calibrators = []
        fixed_count = 0
        
        for i, cal in enumerate(calibrators):
            cal_id = cal.get("id")
            edge_id = cal.get("edge")
            pos_str = cal.get("pos")
            
            if i < 10:  # Ch·ªâ in 10 calibrator ƒë·∫ßu
                print(f"Calibrator {i+1}: {cal_id}")
                print(f"  Edge: {edge_id}")
                print(f"  Position: {pos_str}")
            elif i == 10:
                print("...")
            
            if not pos_str:
                if i < 10:
                    print(f"  ‚ùå Kh√¥ng c√≥ thu·ªôc t√≠nh 'pos'")
                continue
                
            try:
                pos = float(pos_str)
            except ValueError:
                if i < 10:
                    print(f"  ‚ùå Position kh√¥ng h·ª£p l·ªá: {pos_str}")
                continue
            
            try:
                # Ki·ªÉm tra edge t·ªìn t·∫°i
                edge = net.getEdge(edge_id)
                edge_len = edge.getLength()
                
                if i < 10:
                    print(f"  Edge length: {edge_len}")
                
                if pos >= edge_len:
                    if i < 10:
                        print(f"  ‚ùå PROBLEM: Position {pos} >= Edge length {edge_len}")
                    
                    # S·ª≠a position - ƒë·∫∑t c√°ch cu·ªëi edge 2 m√©t ƒë·ªÉ an to√†n
                    safe_pos = max(0, edge_len - 2.0)
                    cal.set("pos", str(safe_pos))
                    fixed_count += 1
                    
                    problem_calibrators.append({
                        'id': cal_id,
                        'edge': edge_id,
                        'old_pos': pos,
                        'new_pos': safe_pos,
                        'edge_len': edge_len
                    })
                else:
                    if i < 10:
                        print(f"  ‚úÖ OK: Position {pos} < Edge length {edge_len}")
                        
            except Exception as e:
                if i < 10:
                    print(f"  ‚ùå L·ªói v·ªõi edge {edge_id}: {str(e)}")
                # N·∫øu edge kh√¥ng t·ªìn t·∫°i, c√≥ th·ªÉ x√≥a calibrator n√†y
                problem_calibrators.append({
                    'id': cal_id,
                    'edge': edge_id,
                    'error': str(e),
                    'remove': True
                })
            
            if i < 10:
                print()
        
        print(f"\n=== T·ªîNG K·∫æT ===")
        print(f"T·ªïng s·ªë calibrator: {len(calibrators)}")
        print(f"Calibrator ƒë√£ s·ª≠a: {fixed_count}")
        
        if problem_calibrators:
            print(f"\nC√°c calibrator ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω:")
            for i, prob in enumerate(problem_calibrators[:15]):  # Hi·ªÉn th·ªã 15 ƒë·∫ßu
                if 'error' in prob:
                    if prob.get('remove'):
                        print(f"  {i+1}. {prob['id']}: L·ªñI - {prob['error']} (s·∫Ω b·ªã x√≥a)")
                    else:
                        print(f"  {i+1}. {prob['id']}: L·ªñI - {prob['error']}")
                else:
                    print(f"  {i+1}. {prob['id']}: {prob['old_pos']:.1f} -> {prob['new_pos']:.1f} (edge: {prob['edge_len']:.1f})")
            
            if len(problem_calibrators) > 15:
                print(f"  ... v√† {len(problem_calibrators) - 15} calibrator kh√°c")
            
            # X√≥a c√°c calibrator c√≥ l·ªói edge kh√¥ng t·ªìn t·∫°i
            removed_count = 0
            for prob in problem_calibrators:
                if prob.get('remove'):
                    # T√¨m v√† x√≥a calibrator n√†y
                    for cal in calibrators:
                        if cal.get("id") == prob['id']:
                            root.remove(cal)
                            removed_count += 1
                            break
            
            if removed_count > 0:
                print(f"\nƒê√£ x√≥a {removed_count} calibrator c√≥ edge kh√¥ng t·ªìn t·∫°i")
            
            # L∆∞u file ƒë√£ s·ª≠a
            output_file = "additional/calibrator_fixed.xml"
            tree.write(output_file, encoding='utf-8', xml_declaration=True)
            print(f"\n‚úÖ ƒê√£ l∆∞u file ƒë√£ s·ª≠a: {output_file}")
            
            # C·∫≠p nh·∫≠t file c·∫•u h√¨nh
            print("\nüìù C·∫≠p nh·∫≠t file region_1.sumocfg:")
            print("Thay ƒë·ªïi d√≤ng:")
            print("  <additional-files value=\"additional/detectors_fixed.xml,additional/calibrator.xml\"/>")
            print("Th√†nh:")
            print("  <additional-files value=\"additional/detectors_fixed.xml,additional/calibrator_fixed.xml\"/>")
            
        else:
            print("‚úÖ T·∫•t c·∫£ calibrator ƒë·ªÅu OK!")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    fix_calibrators()