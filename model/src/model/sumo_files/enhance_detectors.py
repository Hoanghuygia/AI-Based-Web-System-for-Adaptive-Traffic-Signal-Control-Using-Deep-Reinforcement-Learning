import xml.etree.ElementTree as ET
import sumolib
import os

def fix_induction_loops():
    print("=== S·ª¨A INDUCTION LOOP DETECTORS ===\n")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    net_file = "network/region_1.net.xml"
    det_file = "additional/detectors_new.xml"
    
    if not os.path.exists(net_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {net_file}")
        return
    
    if not os.path.exists(det_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {det_file}")
        return
    
    try:
        # ƒê·ªçc network
        print("ƒêang ƒë·ªçc network...")
        net = sumolib.net.readNet(net_file)
        print(f"‚úÖ Network ƒë√£ ƒë∆∞·ª£c ƒë·ªçc th√†nh c√¥ng")
        
        # ƒê·ªçc detectors
        print("ƒêang ƒë·ªçc detectors...")
        tree = ET.parse(det_file)
        root = tree.getroot()
        
        # T√¨m inductionLoop thay v√¨ e1Detector
        detectors = root.findall("inductionLoop")
        print(f"‚úÖ T√¨m th·∫•y {len(detectors)} inductionLoop detector(s)\n")
        
        if len(detectors) == 0:
            print("‚ùå Kh√¥ng c√≥ inductionLoop n√†o trong file!")
            return
        
        problem_detectors = []
        fixed_count = 0
        
        for i, det in enumerate(detectors):
            det_id = det.get("id")
            lane_id = det.get("lane")
            pos_str = det.get("pos")
            
            if i < 10:  # Ch·ªâ in 10 detector ƒë·∫ßu ƒë·ªÉ tr√°nh spam
                print(f"Detector {i+1}: {det_id}")
                print(f"  Lane: {lane_id}")
                print(f"  Position: {pos_str}")
            elif i == 10:
                print("...")
            
            if not pos_str:
                print(f"  ‚ùå Kh√¥ng c√≥ thu·ªôc t√≠nh 'pos'")
                continue
                
            try:
                pos = float(pos_str)
            except ValueError:
                print(f"  ‚ùå Position kh√¥ng h·ª£p l·ªá: {pos_str}")
                continue
            
            try:
                # Ki·ªÉm tra lane t·ªìn t·∫°i
                lane = net.getLane(lane_id)
                lane_len = lane.getLength()
                
                if i < 10:
                    print(f"  Lane length: {lane_len}")
                
                if pos >= lane_len:
                    if i < 10:
                        print(f"  ‚ùå PROBLEM: Position {pos} >= Lane length {lane_len}")
                    
                    # S·ª≠a position
                    safe_pos = max(0, lane_len - 1.0)
                    det.set("pos", str(safe_pos))
                    fixed_count += 1
                    
                    problem_detectors.append({
                        'id': det_id,
                        'lane': lane_id,
                        'old_pos': pos,
                        'new_pos': safe_pos,
                        'lane_len': lane_len
                    })
                else:
                    if i < 10:
                        print(f"  ‚úÖ OK: Position {pos} < Lane length {lane_len}")
                        
            except Exception as e:
                if i < 10:
                    print(f"  ‚ùå L·ªói v·ªõi lane {lane_id}: {str(e)}")
                problem_detectors.append({
                    'id': det_id,
                    'lane': lane_id,
                    'error': str(e)
                })
            
            if i < 10:
                print()
        
        print(f"\n=== T·ªîNG K·∫æT ===")
        print(f"T·ªïng s·ªë detector: {len(detectors)}")
        print(f"Detector ƒë√£ s·ª≠a: {fixed_count}")
        
        if problem_detectors:
            print(f"\nC√°c detector ƒë√£ ƒë∆∞·ª£c s·ª≠a:")
            for i, prob in enumerate(problem_detectors[:10]):  # Ch·ªâ hi·ªÉn th·ªã 10 ƒë·∫ßu
                if 'error' in prob:
                    print(f"  {i+1}. {prob['id']}: L·ªñI - {prob['error']}")
                else:
                    print(f"  {i+1}. {prob['id']}: {prob['old_pos']} -> {prob['new_pos']} (lane: {prob['lane_len']})")
            
            if len(problem_detectors) > 10:
                print(f"  ... v√† {len(problem_detectors) - 10} detector kh√°c")
            
            # L∆∞u file ƒë√£ s·ª≠a
            output_file = "additional/detectors_fixed.xml"
            tree.write(output_file, encoding='utf-8', xml_declaration=True)
            print(f"\n‚úÖ ƒê√£ l∆∞u file ƒë√£ s·ª≠a: {output_file}")
            
            # C·∫≠p nh·∫≠t file c·∫•u h√¨nh
            print("\nüìù C·∫≠p nh·∫≠t file region_1.sumocfg:")
            print("Thay ƒë·ªïi d√≤ng:")
            print("  <additional-files value=\"additional/detectors.xml,additional/calibrator.xml\"/>")
            print("Th√†nh:")
            print("  <additional-files value=\"additional/detectors_fixed.xml,additional/calibrator.xml\"/>")
            
        else:
            print("‚úÖ T·∫•t c·∫£ detector ƒë·ªÅu OK!")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    fix_induction_loops()