# src/api/endpoints/ws_sumo.py
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
import traci
import asyncio
import json
import base64
from io import BytesIO
import pyautogui

router = APIRouter()

@router.websocket("/ws/sumo")
async def websocket_sumo_data(websocket: WebSocket):
    await websocket.accept()
    print("üì° WebSocket client connected")

    selected_junction = None  # m·∫∑c ƒë·ªãnh ch∆∞a c√≥ junction n√†o ƒë∆∞·ª£c ch·ªçn

    try:
        while True:
            # Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend n·∫øu c√≥ (VD: y√™u c·∫ßu g·ª≠i th√¥ng tin junction c·ª• th·ªÉ)
            try:
                message = await asyncio.wait_for(websocket.receive_text(), timeout=0.1)
                data = json.loads(message)
                if "junction_id" in data:
                    selected_junction = data["junction_id"]
                    print(f"üîÑ Selected junction: {selected_junction}")
            except asyncio.TimeoutError:
                pass  # Kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c g·ª≠i t·ª´ frontend

            # G·ª≠i d·ªØ li·ªáu ph∆∞∆°ng ti·ªán
            vehicles = traci.vehicle.getIDList()
            vehicle_data = []

            for veh_id in vehicles:
                pos = traci.vehicle.getPosition(veh_id)
                speed = traci.vehicle.getSpeed(veh_id)
                vehicle_data.append({
                    "id": veh_id,
                    "position": pos,
                    "speed": speed
                })

            # G·ª≠i d·ªØ li·ªáu traffic light n·∫øu junction ƒë√£ ƒë∆∞·ª£c ch·ªçn
            traffic_light_info = {}
            if selected_junction:
                try:
                    phase = traci.trafficlight.getPhase(selected_junction)
                    traffic_light_info = {
                        "id": selected_junction,
                        "phase": phase
                    }
                except Exception as e:
                    traffic_light_info = {
                        "id": selected_junction,
                        "error": f"Junction not found: {e}"
                    }

            await websocket.send_text(json.dumps({
                "vehicles": vehicle_data,
                "traffic_light": traffic_light_info
            }))

            await asyncio.sleep(1)

    except WebSocketDisconnect:
        print("üîå WebSocket client disconnected")

@router.websocket("/ws/sumo-image")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            screenshot = pyautogui.screenshot()  # Capture to√†n m√†n h√¨nh
            # N·∫øu b·∫°n ch·ªâ mu·ªën ph·∫ßn SUMO-GUI: screenshot = pyautogui.screenshot(region=(x, y, w, h))

            buffer = BytesIO()
            screenshot.save(buffer, format="JPEG")
            img_str = base64.b64encode(buffer.getvalue()).decode("utf-8")

            await websocket.send_text(img_str)
            await asyncio.sleep(1)  # G·ª≠i m·ªói 1 gi√¢y
    except Exception as e:
        print(f"WebSocket error: {e}")
        await websocket.close()