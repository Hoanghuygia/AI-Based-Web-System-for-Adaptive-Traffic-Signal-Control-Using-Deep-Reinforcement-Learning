# src/api/endpoints/ws_sumo.py
# from fastapi import APIRouter, WebSocket, WebSocketDisconnect
# import traci
# import asyncio
# import json
# import base64
# from io import BytesIO
# import pyautogui

# router = APIRouter()

# @router.websocket("/ws/sumo")
# async def websocket_sumo_data(websocket: WebSocket):
#     await websocket.accept()
#     print("üì° WebSocket client connected")

#     selected_junction = None  # m·∫∑c ƒë·ªãnh ch∆∞a c√≥ junction n√†o ƒë∆∞·ª£c ch·ªçn

#     try:
#         while True:
#             # Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend n·∫øu c√≥ (VD: y√™u c·∫ßu g·ª≠i th√¥ng tin junction c·ª• th·ªÉ)
#             try:
#                 message = await asyncio.wait_for(websocket.receive_text(), timeout=0.1)
#                 data = json.loads(message)
#                 if "junction_id" in data:
#                     selected_junction = data["junction_id"]
#                     print(f"üîÑ Selected junction: {selected_junction}")
#             except asyncio.TimeoutError:
#                 pass  # Kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c g·ª≠i t·ª´ frontend

#             # G·ª≠i d·ªØ li·ªáu ph∆∞∆°ng ti·ªán
#             vehicles = traci.vehicle.getIDList()
#             vehicle_data = []

#             for veh_id in vehicles:
#                 pos = traci.vehicle.getPosition(veh_id)
#                 speed = traci.vehicle.getSpeed(veh_id)
#                 vehicle_data.append({
#                     "id": veh_id,
#                     "position": pos,
#                     "speed": speed
#                 })

#             # G·ª≠i d·ªØ li·ªáu traffic light n·∫øu junction ƒë√£ ƒë∆∞·ª£c ch·ªçn
#             traffic_light_info = {}
#             if selected_junction:
#                 try:
#                     phase = traci.trafficlight.getPhase(selected_junction)
#                     traffic_light_info = {
#                         "id": selected_junction,
#                         "phase": phase
#                     }
#                 except Exception as e:
#                     traffic_light_info = {
#                         "id": selected_junction,
#                         "error": f"Junction not found: {e}"
#                     }

#             await websocket.send_text(json.dumps({
#                 "vehicles": vehicle_data,
#                 "traffic_light": traffic_light_info
#             }))

#             await asyncio.sleep(1)

#     except WebSocketDisconnect:
#         print("üîå WebSocket client disconnected")

# @router.websocket("/ws/sumo")
# async def websocket_sumo_data(websocket: WebSocket):
#     await websocket.accept()
#     print("üì° WebSocket client connected")

#     selected_junction = None  # m·∫∑c ƒë·ªãnh ch∆∞a c√≥ junction n√†o ƒë∆∞·ª£c ch·ªçn

#     try:
#         while True:
#             # Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend n·∫øu c√≥
#             try:
#                 message = await asyncio.wait_for(websocket.receive_text(), timeout=0.1)
#                 data = json.loads(message)
#                 if "junction_id" in data:
#                     selected_junction = data["junction_id"]
#                     print(f"üîÑ Selected junction: {selected_junction}")
#             except asyncio.TimeoutError:
#                 pass  # Kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c g·ª≠i t·ª´ frontend

#             # G·ª≠i d·ªØ li·ªáu ph∆∞∆°ng ti·ªán
#             vehicles = traci.vehicle.getIDList()
#             vehicle_data = []
#             total_speed = 0.0

#             for veh_id in vehicles:
#                 pos = traci.vehicle.getPosition(veh_id)
#                 speed = traci.vehicle.getSpeed(veh_id)
#                 total_speed += speed
#                 vehicle_data.append({
#                     "id": veh_id,
#                     "position": pos,
#                     "speed": speed
#                 })

#             # T√≠nh t·ªëc ƒë·ªô trung b√¨nh
#             avg_speed = total_speed / len(vehicles) if vehicles else 0.0

#             # X√°c ƒë·ªãnh tr·∫°ng th√°i giao th√¥ng
#             if avg_speed < 5:
#                 traffic_status = "heavy traffic"
#             elif avg_speed < 15:
#                 traffic_status = "moderate traffic"
#             else:
#                 traffic_status = "light traffic"

#             # G·ª≠i d·ªØ li·ªáu traffic light n·∫øu junction ƒë√£ ƒë∆∞·ª£c ch·ªçn
#             traffic_light_info = {}
#             if selected_junction:
#                 try:
#                     phase = traci.trafficlight.getPhase(selected_junction)
#                     traffic_light_info = {
#                         "id": selected_junction,
#                         "phase": phase
#                     }
#                 except Exception as e:
#                     traffic_light_info = {
#                         "id": selected_junction,
#                         "error": f"Junction not found: {e}"
#                     }

#             # G·ª≠i t·∫•t c·∫£ th√¥ng tin v·ªÅ frontend
#             await websocket.send_text(json.dumps({
#                 "vehicles": vehicle_data,
#                 "average_speed": avg_speed,
#                 "traffic_status": traffic_status,
#                 "traffic_light": traffic_light_info
#             }))

#             await asyncio.sleep(1)

#     except WebSocketDisconnect:
#         print("üîå WebSocket client disconnected")

# @router.websocket("/ws/sumo-image")
# async def websocket_endpoint(websocket: WebSocket):
#     await websocket.accept()
#     try:
#         while True:
#             screenshot = pyautogui.screenshot()  # Capture to√†n m√†n h√¨nh
#             # x, y, w, h = 706, 466, 200, 200
#             # N·∫øu b·∫°n ch·ªâ mu·ªën ph·∫ßn SUMO-GUI: 
#             # screenshot = pyautogui.screenshot(region=(860, 650, 100, 65))

#             buffer = BytesIO()
#             screenshot.save(buffer, format="JPEG")
#             img_str = base64.b64encode(buffer.getvalue()).decode("utf-8")

#             await websocket.send_text(img_str)
#             await asyncio.sleep(1)  # G·ª≠i m·ªói 1 gi√¢y
#     except Exception as e:
#         print(f"WebSocket error: {e}")
#         await websocket.close()

# @router.websocket("/ws/sumo")
# async def websocket_sumo_data(websocket: WebSocket):
#     await websocket.accept()
#     print("üì° WebSocket client connected")

#     selected_junction = None  # m·∫∑c ƒë·ªãnh ch∆∞a c√≥ junction n√†o ƒë∆∞·ª£c ch·ªçn

#     try:
#         while True:
#             try:
#                 message = await asyncio.wait_for(websocket.receive_text(), timeout=0.1)
#                 data = json.loads(message)
#                 print(f"Received data: {data}")
#                 if "junction_id" in data:
#                     selected_junction = data["junction_id"]
#                     print(f"üîÑ Selected junction: {selected_junction}")
#             except asyncio.TimeoutError:
#                 pass

#             vehicle_data = []
#             avg_speed = 0.0
#             traffic_status = "N/A"  # Default

#             if selected_junction:
#                 try:
#                     # Th√¥ng tin traffic light
#                     phase = traci.trafficlight.getPhase(selected_junction)
#                     traffic_light_info = {
#                         "id": selected_junction,
#                         "phase": phase
#                     }

#                     # C√°c l√†n ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn b·ªüi junction n√†y
#                     controlled_lanes = traci.trafficlight.getControlledLanes(selected_junction)
#                     total_speed = 0.0
#                     vehicle_count = 0

#                     for lane_id in controlled_lanes:
#                         veh_ids = traci.lane.getLastStepVehicleIDs(lane_id)
#                         for veh_id in veh_ids:
#                             speed = traci.vehicle.getSpeed(veh_id)
#                             pos = traci.vehicle.getPosition(veh_id)

#                             total_speed += speed
#                             vehicle_count += 1

#                             vehicle_data.append({
#                                 "id": veh_id,
#                                 "position": pos,
#                                 "speed": speed
#                             })

#                     # T√≠nh t·ªëc ƒë·ªô trung b√¨nh
#                     avg_speed = total_speed / vehicle_count if vehicle_count > 0 else 0.0

#                     # Ph√¢n lo·∫°i giao th√¥ng
#                     if avg_speed < 5:
#                         traffic_status = "heavy traffic"
#                     elif avg_speed < 15:
#                         traffic_status = "moderate traffic"
#                     else:
#                         traffic_status = "light traffic"

#                 except Exception as e:
#                     traffic_light_info = {
#                         "id": selected_junction,
#                         "error": f"Junction not found: {e}"
#                     }
#             else:
#                 traffic_light_info = {}

#             # G·ª≠i d·ªØ li·ªáu v·ªÅ frontend
#             await websocket.send_text(json.dumps({
#                 "vehicles": vehicle_data,
#                 "average_speed": avg_speed,
#                 "traffic_status": traffic_status,
#                 "traffic_light": traffic_light_info
#             }))

#             await asyncio.sleep(1)

#     except WebSocketDisconnect:
#         print("üîå WebSocket client disconnected")

# VIEW_ID = "View #0"

# @router.websocket("/ws/sumo-image")
# async def websocket_endpoint(websocket: WebSocket):
#     await websocket.accept()
#     try:
#         while True:
#             #* Ki·ªÉm tra c√≥ message t·ª´ FE kh√¥ng*
#             if websocket.client_state.name == "CONNECTED":
#                 try:
#                     message = await asyncio.wait_for(websocket.receive_text(), timeout=0.1)
#                     data = json.loads(message)  # Parse JSON
#                     print(f"Received data: {data}")
                    
#                     if "junction_id" in data:
#                         junction_id = data["junction_id"]
#                         print(f"Junction: {junction_id}")
                        
#                         #* L·∫•y t·ªça ƒë·ªô junction*
#                         pos = traci.junction.getPosition(junction_id)
#                         #* Di chuy·ªÉn camera t·ªõi junction*
#                         traci.gui.setOffset(VIEW_ID, pos[0], pos[1])
#                         #* Zoom m·ª©c ph√π h·ª£p (tu·ª≥ b·∫°n ƒëi·ªÅu ch·ªânh)*
#                         traci.gui.setZoom(VIEW_ID, 50)
                        
#                 except asyncio.TimeoutError:
#                     #* Kh√¥ng c√≥ message m·ªõi th√¨ b·ªè qua*
#                     pass
#                 except json.JSONDecodeError as e:
#                     print(f"JSON decode error: {e}")
#                     pass
                    
#             #* Ch·ª•p m√†n h√¨nh to√†n GUI*
#             screenshot = pyautogui.screenshot()
#             #* Convert sang base64*
#             buffer = BytesIO()
#             screenshot.save(buffer, format="JPEG")
#             img_str = base64.b64encode(buffer.getvalue()).decode("utf-8")
#             #* G·ª≠i v·ªÅ FE*
#             await websocket.send_text(img_str)
#             await asyncio.sleep(1)
            
#     except Exception as e:
#         print(f"WebSocket error: {e}")
#         await websocket.close()


from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from concurrent.futures import ThreadPoolExecutor
from io import BytesIO
import pyautogui
import traci
import asyncio, json, base64, uuid, time
from io import BytesIO
import os

router = APIRouter()

VIEW_ID = "View #0"

# Th√™m thread pool cho blocking operations
executor = ThreadPoolExecutor(max_workers=2)

@router.websocket("/ws/sumo-stream")
async def websocket_sumo_stream(websocket: WebSocket):
    await websocket.accept()
    print("üì° WebSocket client connected")

    selected_junction = None
    last_screenshot_time = 0

    try:
        while True:
            # 1. Nh·∫≠n message t·ª´ FE (ch·ªçn junction)
            try:
                message = await asyncio.wait_for(websocket.receive_text(), timeout=0.1)
                data = json.loads(message)

                if "junction_id" in data:
                    junction_id = str(data["junction_id"]).strip()
                    if junction_id and len(junction_id) < 50:
                        selected_junction = junction_id
                        print(f"üîÑ Selected junction: {selected_junction}")

                        # Di chuy·ªÉn camera
                        try:
                            pos = traci.junction.getPosition(selected_junction)
                            traci.gui.setOffset(VIEW_ID, pos[0], pos[1])
                            traci.gui.setZoom(VIEW_ID, 550)  # Zoom b·∫°n ƒë√£ ch·ªânh
                        except Exception as e:
                            print(f"Error moving camera: {e}")

            except asyncio.TimeoutError:
                pass
            except json.JSONDecodeError:
                print("Invalid JSON received")
                continue

            # 2. Thu th·∫≠p d·ªØ li·ªáu traffic
            vehicle_data = []
            avg_speed = 0.0
            traffic_status = "N/A"

            if selected_junction:
                try:
                    phase = traci.trafficlight.getPhase(selected_junction)
                    traffic_light_info = {
                        "id": selected_junction,
                        "phase": phase
                    }

                    controlled_lanes = traci.trafficlight.getControlledLanes(selected_junction)
                    total_speed = 0.0
                    vehicle_count = 0

                    for lane_id in controlled_lanes:
                        veh_ids = traci.lane.getLastStepVehicleIDs(lane_id)
                        for veh_id in veh_ids:
                            speed = traci.vehicle.getSpeed(veh_id)
                            pos = traci.vehicle.getPosition(veh_id)

                            total_speed += speed
                            vehicle_count += 1

                            vehicle_data.append({
                                "id": veh_id,
                                "position": pos,
                                "speed": speed
                            })

                    avg_speed = total_speed / vehicle_count if vehicle_count > 0 else 0.0

                    if avg_speed < 5:
                        traffic_status = "heavy traffic"
                    elif avg_speed < 15:
                        traffic_status = "moderate traffic"
                    else:
                        traffic_status = "light traffic"

                except Exception as e:
                    traffic_light_info = {
                        "id": selected_junction,
                        "error": f"Junction not found: {e}"
                    }
            else:
                traffic_light_info = {}

            # 3. G·ª≠i data JSON
            await websocket.send_text(json.dumps({
                "type": "data",
                "vehicles": vehicle_data,
                "average_speed": avg_speed,
                "traffic_status": traffic_status,
                "traffic_light": traffic_light_info
            }))

            # 4. G·ª≠i ·∫£nh screenshot (1 FPS)
            current_time = asyncio.get_event_loop().time()
            if current_time - last_screenshot_time >= 1.0:
                try:
                    # Ch·ª•p ·∫£nh b·∫±ng traci.gui.screenshot
                    temp_file = "temp_sumo_screenshot.png"
                    traci.gui.screenshot(VIEW_ID, temp_file)

                    # Chuy·ªÉn file ·∫£nh th√†nh base64
                    with open(temp_file, "rb") as f:
                        img_str = base64.b64encode(f.read()).decode("utf-8")

                    # G·ª≠i ·∫£nh l√™n FE
                    await websocket.send_text(json.dumps({
                        "type": "image",
                        "image": img_str
                    }))

                    # X√≥a file t·∫°m ƒë·ªÉ tr√°nh r√°c
                    os.remove(temp_file)

                    last_screenshot_time = current_time

                except Exception as e:
                    print(f"Screenshot error: {e}")

            # Sleep ng·∫Øn ƒë·ªÉ responsive
            await asyncio.sleep(0.1)

    except WebSocketDisconnect:
        print("üîå WebSocket client disconnected")
    except Exception as e:
        print(f"WebSocket error: {e}")
